#!/usr/bin/env python3

# https://github.com/helloSystem/Menu/issues/3


import os
import platform
import re
import subprocess
import sys

from PyQt5.QtCore import (QCoreApplication, QEvent, QMetaObject, QObject,
                          QProcess, Qt, QTimer)
from PyQt5.QtGui import QCursor, QIcon, QPixmap
from PyQt5.QtWidgets import (QAction, QActionGroup, QApplication,
                             QDesktopWidget, QGroupBox, QHBoxLayout, QMenu,
                             QMessageBox, QSlider, QSystemTrayIcon, QWidget)
from PyQt5.QtCore import QRegularExpression

# Show the slider UI when QSystemTrayIcon is left-clicked


class Ui_Slider(QWidget):

    def __init__(self, tray):

        super().__init__()

        self.vol = 0
        self.mic = 0
        self.tray = tray
        self.has_mic = False
        self.has_rec = False
        # self.resize(170, 282)
        self.setFixedHeight(200)
        self.setMaximumWidth(150)

        screen = QDesktopWidget().screenGeometry()
        widget = self.geometry()

        self.setWindowFlags(Qt.Window | Qt.FramelessWindowHint |
                            Qt.WindowStaysOnTopHint | Qt.WindowSystemMenuHint)
        self.move(QCursor.pos())

        self.horizontalLayout = QHBoxLayout(self)
        self.horizontalLayout.setContentsMargins(15, 15, 15, 15)
        # Box with slider for playback volume
        self.groupBox = QGroupBox()
        self.groupBox.setObjectName("Play")
        self.horizontalLayout_2 = QHBoxLayout(self.groupBox)
        self.play_slider = QSlider(self.groupBox)
        self.play_slider.setOrientation(Qt.Vertical)
        self.horizontalLayout_2.addWidget(self.play_slider)
        self.horizontalLayout.addWidget(self.groupBox)
        self.play_slider.sliderReleased.connect(self.sliderReleased)
        # Box with slider for recording volume
        # TODO: Check whether the output of 'mixer' has a line that starts with 'Mixer mic', otherwise not add this
        self.groupBox_2 = QGroupBox()
        self.groupBox.setObjectName("Record")
        self.horizontalLayout_3 = QHBoxLayout(self.groupBox_2)
        self.rec_slider = QSlider(self.groupBox_2)
        self.rec_slider.setOrientation(Qt.Vertical)
        self.horizontalLayout_3.addWidget(self.rec_slider)
        self.horizontalLayout.addWidget(self.groupBox_2)
        self.play_slider.valueChanged['int'].connect(self.setPlayVolume)
        self.rec_slider.valueChanged['int'].connect(self.setRecVolume)

        self.rec_slider.sliderReleased.connect(self.sliderReleased)
        QMetaObject.connectSlotsByName(self)
        _tr = QCoreApplication.translate
        self.groupBox.setTitle(_tr("Slider", "Play"))
        self.groupBox_2.setTitle(_tr("Slider", "Record"))
        self.installEventFilter(self)
        self.updateSliderValues()
        self.timer = QTimer()
        self.timer.setInterval(1000)  # Every second
        self.timer.timeout.connect(self.updateSliderValues)

    def updateSliderValues(self):
        p = QProcess()
        p.setProgram("mixer")
        p.setArguments(["-S"])
        print(p.program() + " " + " ".join(p.arguments()))
        p.start()
        p.waitForFinished()
        results = str(p.readAllStandardOutput(), 'utf-8').strip().split(" ")
        print(results)
        self.play_slider.setValue(0)
        self.rec_slider.setValue(0)
        self.groupBox_2.setHidden(True)  # Except if we find a mic or rec below
        for result in results:
            print(result)
            parts = result.split(":")
            if len(parts) == 3 and parts[0] == "vol":
                self.play_slider.setValue(int(parts[1]))
            if len(parts) == 3 and parts[0] == "mic":
                self.rec_slider.setValue(int(parts[1]))
                self.groupBox_2.setHidden(False)
                self.has_mic = True
            # On some devices, it is called "rec" instead of "mic"
            elif len(parts) == 3 and parts[0] == "rec":
                self.rec_slider.setValue(int(parts[1]))
                self.groupBox_2.setHidden(False)
                self.has_rec = True

    def eventFilter(self, obj, event):
        # Close the window if it is not the active window anymore
        if event.type() == QEvent.ActivationChange and not self.isActiveWindow():
            self.timer.stop()
            self.close()
        # Update the slider values when the window is shown
        if event.type() == QEvent.ActivationChange and self.isActiveWindow():
            self.timer.start()
            self.updateSliderValues()
        return QWidget.eventFilter(self, obj, event)

    def setPlayVolume(self):
        value = self.play_slider.value()
        self.vol = value 
        self.UpdateIconbyVolumen(self)
        p = QProcess()
        p.setProgram("mixer")
        # TODO: Actually there is Mixer vol and Mixer pcm. Which is which and what are they doing? Which one(s) should we set?
        p.setArguments(["vol", str(value) + ":" + str(value)])
        print(p.program() + " " + " ".join(p.arguments()))
        p.startDetached()

    def setRecVolume(self):
        print(self.rec_slider.value())
        value = self.rec_slider.value()
        self.rec = value
        p = QProcess()
        p.setProgram("mixer")
        if self.has_mic:
            p.setArguments(["mic", str(value) + ":" + str(value)])
        elif self.has_rec:
            p.setArguments(["rec", str(value) + ":" + str(value)])
        print(p.program() + " " + " ".join(p.arguments()))
        p.startDetached()

        
    def UpdateIconbyVolumen(self, Slider):
        print("slider vol ", Slider.vol)
        if Slider.vol == 0 :
              icon = QIcon(os.path.dirname(__file__) +
                     '/Resources/audio-volume-muted-symbolic.png')
        else:
              print("slider vol not muted ", Slider.vol)             
              icon = QIcon(os.path.dirname(__file__) +
                     '/Resources/audio-volume-high-symbolic.png')
        self.tray.setIcon(icon)
        self.tray.setVisible(True)
        
    def sliderReleased(self):
        self.close()


class VolumeMenu(QObject):

    def __init__(self):

        super().__init__()
        # icon = QIcon.fromTheme("audio-volume-high-symbolic") # FIXME: How to get dark rather than bright icon?
        icon = QIcon(os.path.dirname(__file__) +
                     '/Resources/audio-volume-high-symbolic.png')

        self.tray = QSystemTrayIcon()
        self.tray.setIcon(icon)
        self.tray.setVisible(True)
        self.menu = QMenu()

        # Refresh each time the menu is clicked (left click)
        self.tray.activated.connect(self.onClicked)
        # Also refresh the list of devices when the context menu is requested (right click)
        self.menu.aboutToShow.connect(self.refreshMenu)

        self.tray.setContextMenu(self.menu)

        # If we are on FreeBSD, ensure that sysctl hw.snd.verbose is 0
        # Otherwise this application will not work correctly
        if platform.system() == "FreeBSD":
            if int(subprocess.check_output("sysctl hw.snd.verbose", shell=True).decode('utf-8').split(" ")[-1]) != 0:
                print("hw.snd.verbose is not 0")
                # Show a warning dialog
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setText("hw.snd.verbose is not 0")
                msg.setInformativeText(
                    "This application will not work correctly unless hw.snd.verbose is 0")
                msg.setWindowTitle("Warning")
                msg.setStandardButtons(QMessageBox.Ok)
                msg.exec_()

        # If we are on FreeBSD, check that hw.snd.default_auto is 2
        if platform.system() == "FreeBSD":
            default_auto = subprocess.check_output(
                "sysctl hw.snd.default_auto", shell=True).decode('utf-8').split(" ")[-1]
            if int(default_auto) != 2:
                print("hw.snd.default_auto is not 2 but it is " + default_auto)
                # Show a warning dialog
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setText("hw.snd.default_auto is not 2")
                msg.setInformativeText(
                    "In order to switch automatically to the sound device plugged in most recently, set hw.snd.default_auto to 2")
                msg.setWindowTitle("Warning")
                msg.setStandardButtons(QMessageBox.Ok)
                msg.exec_()

        # NOTE:
        # https://forum.learnpyqt.com/t/qsystemtrayicon-example/689
        # Sneaky PyQt quirk! A reference to the actions must be kept around or the actions will be destroyed
        self.actions = []
        self.sliderWindow = None
        self.refreshMenu()  # Initially populate the menu

    def onClicked(self, reason):
        # TODO: Is using customContextMenuRequested the proper way to do this? How?
        self.refreshMenu()
        S = Ui_Slider(self.tray)
        self.sliderWindow = S  # Need to keep a reference around so that it does
        # not get destroyed
        S.show()

    def refreshMenu(self):
        print("refreshMenu function running")
        self.actions = []
        self.menu.clear()
        # Get the sound devices from
        # cat /dev/sndstat
        p = QProcess()
        p.setProgram("cat")
        p.setArguments(["/dev/sndstat"])
        print(p.program() + " " + " ".join(p.arguments()))
        p.start()
        p.waitForFinished()
        lines = str(p.readAllStandardOutput(), 'utf-8').strip().split("\n")

        # Add the devices to the menu
        # Playback devices
        # Only one of the actions added to this group can be active
        self.playbackGroup = QActionGroup(self.menu)
        # action = QAction("Play")
        # action.setDisabled(True)
        # self.actions.append(action)
        # self.menu.addAction(action)

        p = QProcess()
        p.setProgram("sysctl")

        for line in lines:
            if not line.startswith("pcm"):  # or not "play" in line:
                continue
            print(line)
            label = line.split("<")[1].split(">")[0]
            action = QAction(line)
            action.__setattr__("device", line.split(":")[0])
            # lambda could be used to pass an argument but the argument passed is taken at the time when this executes, which is not what we want
            action.triggered.connect(self.switchDevice)

            pcm = line.split(":")[0].replace("pcm", "")
            # Get uaudioX from sysctl dev.pcm.pcmX.%parent
            p.setArguments(["-n", "dev.pcm." + pcm + ".%parent"])
            print(p.program() + " " + " ".join(p.arguments()))
            p.start()
            p.waitForFinished()
            device = str(p.readAllStandardOutput(), 'utf-8').strip()
            print("device is " + device)
            # Get the device name from dev.uaudio.1.%desc
            # Separate the device name (which can be uaudio or other text) from the device number which follows it
            re = QRegularExpression("([a-z]+)([0-9]+)")
            match = re.match(device)
            if match.hasMatch():
                p.setArguments(
                    ["-n", "dev." + match.captured(1) + "." + match.captured(2) + ".%desc"])
                print(p.program() + " " + " ".join(p.arguments()))
                p.start()
                p.waitForFinished()
                deviceName = str(p.readAllStandardOutput(), 'utf-8').strip()
                # If there is ", class" in the device name, only take the part before that string
                if ", class" in deviceName:
                    deviceName = deviceName.split(", class")[0]
                print("Shortened deviceName is " + deviceName)
            else:
                deviceName = device

            action.setText(deviceName)

            action.setCheckable(True)
            if "default" in line:
                action.setChecked(True)
            self.actions.append(action)
            self.playbackGroup.addAction(action)
            self.menu.addAction(action)
        # self.menu.addSeparator()
        # # Recording devices
        # self.recordingGroup = QActionGroup(self.menu) # Only one of the actions added to this group can be active
        # action = QAction("Record")
        # action.setDisabled(True)
        # self.actions.append(action)
        # self.menu.addAction(action)
        # for line in lines:
        #     if not line.startswith("pcm") or not "rec" in line:
        #         continue
        #     print(line)
        #     label = line.split("<")[1].split(">")[0]
        #     action = QAction(line + " rec")
        #     action.__setattr__("device", line.split(":")[0])
        #     action.triggered.connect(self.switchDevice) # lambda could be used to pass an argument but the argument passed is taken at the time when this executes, which is not what we want
        #     action.setText(label)
        #     action.setCheckable(True)
        #     if "default" in line:
        #         action.setChecked(True)
        #     self.actions.append(action)
        #     self.recordingGroup.addAction(action)
        #     self.menu.addAction(action)
        self.menu.addSeparator()
        action = QAction("About")
        action.triggered.connect(self._showAbout)
        self.actions.append(action)
        self.menu.addAction(action)

    def switchDevice(self, line):
        # sysctl hw.snd.default_unit=1 switches to pcm1
        if getattr(self.playbackGroup.checkedAction(), "device").startswith("pcm"):
            dev = getattr(self.playbackGroup.checkedAction(),
                          "device").replace("pcm", "")
        else:
            return
        p = QProcess()
        p.setProgram("sysctl")
        # TODO: How to ONLY switch the device for recording or ONLY the device for playback?
        p.setArguments(["hw.snd.default_unit=" + dev])
        print(p.program() + " " + " ".join(p.arguments()))
        p.startDetached()

    
    def _showAbout(self):
        print("showDialog")
        msg = QMessageBox()
        msg.setWindowTitle("Volume")
        msg.setIconPixmap(QPixmap(os.path.dirname(
            __file__) + "/Resources/Volume.png").scaledToWidth(64, Qt.SmoothTransformation))
        candidates = ["COPYRIGHT", "COPYING", "LICENSE"]
        for candidate in candidates:
            if os.path.exists(os.path.dirname(__file__) + "/" + candidate):
                with open(os.path.dirname(__file__) + "/" + candidate, 'r') as file:
                    data = file.read()
                msg.setDetailedText(data)
        msg.setText("<h3>Volume</h3>")
        msg.setInformativeText("A simple QSystemTrayIcon application to select the audio device using <a href='https://www.freebsd.org/cgi/man.cgi?sysctl'>sysctl hw.snd.default_unit</a> and to set the volume using <a href='https://www.freebsd.org/cgi/man.cgi?mixer'>mixer</a><br><br><a href='https://github.com/helloSystem/Utilities'>https://github.com/helloSystem/Utilities</a>")
        msg.exec()


if __name__ == "__main__":

    # Simple singleton:
    # Ensure that only one instance of this application is running by trying to kill the other ones
    p = QProcess()
    p.setProgram("pkill")
    p.setArguments(["-f", os.path.abspath(__file__)])
    cmd = p.program() + " " + " ".join(p.arguments())
    print(cmd)
    p.start()
    p.waitForFinished()

    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.setAttribute(Qt.AA_UseHighDpiPixmaps)
    VM = VolumeMenu()
    sys.exit(app.exec_())
