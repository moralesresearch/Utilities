#!/usr/bin/env python3

# https://github.com/helloSystem/Menu/issues/3


from PyQt5.QtWidgets import QApplication, QSystemTrayIcon, QMenu, QAction, QHBoxLayout, QGroupBox, QSlider, QWidget, \
    QActionGroup, QDesktopWidget, QMessageBox
from PyQt5.QtGui import QIcon, QPixmap, QCursor
from PyQt5.QtCore import Qt, QProcess, QMetaObject, QCoreApplication, QEvent, QObject, QTimer
import sys, os

# Show the slider UI when QSystemTrayIcon is left-clicked
class Ui_Slider(QWidget):

    def __init__(self):
    
        super().__init__()

        self.vol = 0
        self.mic = 0

        # self.resize(170, 282)
        self.setFixedHeight(200)
        self.setMaximumWidth(150)

        screen = QDesktopWidget().screenGeometry()
        widget = self.geometry()

        self.setWindowFlags(Qt.Window | Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.WindowSystemMenuHint)
        self.move(QCursor.pos())

        self.horizontalLayout = QHBoxLayout(self)
        self.horizontalLayout.setContentsMargins(15, 15, 15, 15)
        # Box with slider for playback volume
        self.groupBox = QGroupBox()
        self.groupBox.setObjectName("Play")
        self.horizontalLayout_2 = QHBoxLayout(self.groupBox)
        self.play_slider = QSlider(self.groupBox)
        self.play_slider.setOrientation(Qt.Vertical)
        self.horizontalLayout_2.addWidget(self.play_slider)
        self.horizontalLayout.addWidget(self.groupBox)
        self.play_slider.sliderReleased.connect(self.sliderReleased)
        # Box with slider for recording volume
        # TODO: Check whether the output of 'mixer' has a line that starts with 'Mixer mic', otherwise not add this
        self.groupBox_2 = QGroupBox()
        self.groupBox.setObjectName("Record")
        self.horizontalLayout_3 = QHBoxLayout(self.groupBox_2)
        self.rec_slider = QSlider(self.groupBox_2)
        self.rec_slider.setOrientation(Qt.Vertical)
        self.horizontalLayout_3.addWidget(self.rec_slider)
        self.horizontalLayout.addWidget(self.groupBox_2)
        self.play_slider.valueChanged['int'].connect(self.setPlayVolume)
        self.rec_slider.valueChanged['int'].connect(self.setRecVolume)

        self.rec_slider.sliderReleased.connect(self.sliderReleased)
        QMetaObject.connectSlotsByName(self)
        _tr = QCoreApplication.translate
        self.groupBox.setTitle(_tr("Slider", "Play"))
        self.groupBox_2.setTitle(_tr("Slider", "Record"))
        self.installEventFilter(self)
        self.updateSliderValues()
        self.timer = QTimer()
        self.timer.setInterval(1000) # Every second
        self.timer.timeout.connect(self.updateSliderValues)

    def updateSliderValues(self):
        p = QProcess()
        p.setProgram("mixer")
        p.setArguments(["-S"])
        print(p.program() + " " + " ".join(p.arguments()))
        p.start()
        p.waitForFinished()
        results = str(p.readAllStandardOutput(), 'utf-8').strip().split(" ")
        print(results)
        self.play_slider.setValue(0)
        self.rec_slider.setValue(0)
        self.groupBox_2.setHidden(True) # Except if we find a mic below
        for result in results:
            print(result)
            parts = result.split(":")
            if len(parts) == 3 and parts[0] == "vol":
                self.play_slider.setValue(int(parts[1]))
            if len(parts) == 3 and parts[0] == "mic":
                self.rec_slider.setValue(int(parts[1]))
                self.groupBox_2.setHidden(False)

    def eventFilter(self, obj, event):
        # Close the window if it is not the active window anymore
        if event.type() == QEvent.ActivationChange and not self.isActiveWindow():
            self.timer.stop()
            self.close()
        # Update the slider values when the window is shown
        if event.type() == QEvent.ActivationChange and self.isActiveWindow():
            self.timer.start()
            self.updateSliderValues()
        return QWidget.eventFilter(self, obj, event)

    def setPlayVolume(self):
        value = self.play_slider.value()
        p = QProcess()
        p.setProgram("mixer")
        # TODO: Actually there is Mixer vol and Mixer pcm. Which is which and what are they doing? Which one(s) should we set?
        p.setArguments(["vol", str(value) + ":" + str(value)])
        print(p.program() + " " + " ".join(p.arguments()))
        p.startDetached()

    def setRecVolume(self):
        print(self.rec_slider.value())
        value = self.rec_slider.value()
        p = QProcess()
        p.setProgram("mixer")
        # TODO: Check whether the output of 'mixer' has a line that starts with 'Mixer mic', otherwise not do this
        p.setArguments(["mic", str(value) + ":" + str(value)])
        print(p.program() + " " + " ".join(p.arguments()))
        p.startDetached()

    def sliderReleased(self):
        self.close()
        
        
class VolumeMenu(QObject):

    def __init__(self):

        super().__init__()

        # icon = QIcon.fromTheme("audio-volume-high-symbolic") # FIXME: How to get dark rather than bright icon?
        icon = QIcon(os.path.dirname(__file__) + '/Resources/audio-volume-high-symbolic.png')

        self.tray = QSystemTrayIcon()
        self.tray.setIcon(icon)
        self.tray.setVisible(True)
        self.menu = QMenu()
        
        self.tray.activated.connect(self.onClicked) # Refresh each time the menu is clicked. FIXME: Does not work on right-click; why?

        self.tray.setContextMenu(self.menu)
        
        # TODO: Add a check to ensure that
        # sysctl hw.snd.verbose is 0
        # Otherwise this application will not work correctly
        # and that 
        # sysctl hw.snd.default_auto is 2
        # Otherwise newly attached sound devices will not be activated automatically
        
        # NOTE:
        # https://forum.learnpyqt.com/t/qsystemtrayicon-example/689
        # Sneaky PyQt quirk! A reference to the actions must be kept around or the actions will be destroyed
        self.actions = []
        self.sliderWindow = None
        
        self.refreshMenu() # Initially populate the menu
        self.tray.installEventFilter(self) # FIXME: This never seems to get called, why?
        self.installEventFilter(self)  # FIXME: This never seems to get called, why?

    def eventFilter(self, obj, event):
        print("eventFilter function running") # FIXME: Why is this never called when the icon is right-clicked?
        # We need to refresh the contents of the right-click menu somehow when the user right-clicks...

    def onClicked(self, reason):
        # TODO: Is using customContextMenuRequested the proper way to do this? How?
        self.refreshMenu()
        S = Ui_Slider()
        self.sliderWindow = S # Need to keep a reference around so that it does not get destroyed
        S.show()

    def refreshMenu(self):
        self.actions = []
        self.menu.clear()
        # Get the sound devices from
        # cat /dev/sndstat
        p = QProcess()
        p.setProgram("cat")
        p.setArguments(["/dev/sndstat"])
        print(p.program() + " " + " ".join(p.arguments()))
        p.start()
        p.waitForFinished()
        lines = str(p.readAllStandardOutput(), 'utf-8').strip().split("\n")
        
        # TODO: /dev/sndstat calls *any* USB audio device just "<USB audio>"
        # How can we get the proper name, e.g., the one that shows up in /var/log/messages?
        # This is what /var/log/messages shows:
        # ugen0.8: <ZOOM Corporation H1> at usbus0
        # uaudio1 on uhub3
        # uaudio1: <ZOOM Corporation H1, class 0/0, rev 1.10/0.00, addr 7> on usbus0
        # (...)
        # uaudio1: No MIDI sequencer.
        # pcm3: <USB audio> on uaudio1
        # uaudio1: No HID volume keys found.
        #
        # This is what /dev/sndstat shows:
        # pcm3: <USB audio> (play/rec)
        #
        # So we could match from pcm3 via uaudio1 to <ZOOM Corporation H1>
        # but doing so by parsing /var/log/messages can become messy quickly
        # as devices can come and go. What is the best way to do this?

        # Add the devices to the menu
        # Playback devices
        self.playbackGroup = QActionGroup(self.menu) # Only one of the actions added to this group can be active
        # action = QAction("Play")
        # action.setDisabled(True)
        # self.actions.append(action)
        # self.menu.addAction(action)
        for line in lines:
            if not line.startswith("pcm"): # or not "play" in line:
                continue
            print(line)
            label = line.split("<")[1].split(">")[0]
            action = QAction(line)
            action.__setattr__("device", line.split(":")[0])
            action.triggered.connect(self.switchDevice)  # lambda could be used to pass an argument but the argument passed is taken at the time when this executes, which is not what we want
            action.setText(label)
            action.setCheckable(True)
            if "default" in line:
                action.setChecked(True)
            self.actions.append(action)
            self.playbackGroup.addAction(action)
            self.menu.addAction(action)
        # self.menu.addSeparator()
        # # Recording devices
        # self.recordingGroup = QActionGroup(self.menu) # Only one of the actions added to this group can be active
        # action = QAction("Record")
        # action.setDisabled(True)
        # self.actions.append(action)
        # self.menu.addAction(action)
        # for line in lines:
        #     if not line.startswith("pcm") or not "rec" in line:
        #         continue
        #     print(line)
        #     label = line.split("<")[1].split(">")[0]
        #     action = QAction(line + " rec")
        #     action.__setattr__("device", line.split(":")[0])
        #     action.triggered.connect(self.switchDevice) # lambda could be used to pass an argument but the argument passed is taken at the time when this executes, which is not what we want
        #     action.setText(label)
        #     action.setCheckable(True)
        #     if "default" in line:
        #         action.setChecked(True)
        #     self.actions.append(action)
        #     self.recordingGroup.addAction(action)
        #     self.menu.addAction(action)
        self.menu.addSeparator()
        action = QAction("About")
        action.triggered.connect(self._showAbout)
        self.actions.append(action)
        self.menu.addAction(action)
        
    def switchDevice(self, line):
        # sysctl hw.snd.default_unit=1 switches to pcm1
        if getattr(self.playbackGroup.checkedAction(), "device").startswith("pcm"):
            dev = getattr(self.playbackGroup.checkedAction(), "device").replace("pcm", "")
        else:
            return
        p = QProcess()
        p.setProgram("sysctl")
        # TODO: How to ONLY switch the device for recording or ONLY the device for playback?
        p.setArguments(["hw.snd.default_unit=" + dev])
        print(p.program() + " " + " ".join(p.arguments()))
        p.startDetached()

    def _showAbout(self):
        print("showDialog")
        msg = QMessageBox()
        msg.setWindowTitle("Volume")
        msg.setIconPixmap(QPixmap(os.path.dirname(__file__) + "/Resources/Volume.png").scaledToWidth(64, Qt.SmoothTransformation))
        candidates = ["COPYRIGHT", "COPYING", "LICENSE"]
        for candidate in candidates:
            if os.path.exists(os.path.dirname(__file__) + "/" + candidate):
                with open(os.path.dirname(__file__) + "/" + candidate, 'r') as file:
                    data = file.read()
                msg.setDetailedText(data)
        msg.setText("<h3>Volume</h3>")
        msg.setInformativeText("A simple QSystemTrayIcon application to select the audio device using <a href='https://www.freebsd.org/cgi/man.cgi?sysctl'>sysctl hw.snd.default_unit</a> and to set the volume using using <a href='https://www.freebsd.org/cgi/man.cgi?mixer'>mixer</a><br><br><a href='https://github.com/helloSystem/Utilities'>https://github.com/helloSystem/Utilities</a>")
        msg.exec()


if __name__ == "__main__":

    # Simple singleton:
    # Ensure that only one instance of this application is running by trying to kill the other ones
    p = QProcess()
    p.setProgram("pkill")
    p.setArguments(["-f", os.path.abspath(__file__)])
    cmd = p.program() + " " + " ".join(p.arguments())
    print(cmd)
    p.start()
    p.waitForFinished()

    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.setAttribute(Qt.AA_UseHighDpiPixmaps)
    VM = VolumeMenu()
    sys.exit(app.exec_())
